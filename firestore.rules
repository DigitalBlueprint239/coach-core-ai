rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
        request.auth.token.email in [
          'admin@coachcore.ai',
          'jones@coachcore.ai',
          'support@coachcore.ai',
          'digitalblueprint239@gmail.com'
        ];
    }

    function teamDoc(teamId) {
      return /databases/$(database)/documents/teams/$(teamId);
    }

    function teamExists(teamId) {
      return exists(teamDoc(teamId));
    }

    function getTeam(teamId) {
      return get(teamDoc(teamId));
    }

    function isTeamMember(teamId) {
      return isAuthenticated() &&
        teamExists(teamId) &&
        (getTeam(teamId).data.headCoachId == request.auth.uid ||
         request.auth.uid in getTeam(teamId).data.assistantCoachIds);
    }

    function isTeamHeadCoach(teamId) {
      return isAuthenticated() &&
        teamExists(teamId) &&
        getTeam(teamId).data.headCoachId == request.auth.uid;
    }

    function isValidEmail(email) {
      return email is string &&
        email.size() > 3 &&
        email.size() <= 200 &&
        email.matches('^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
    }

    function hasOnlyAllowedWaitlistKeys(data) {
      return data.keys().hasOnly([
        'email',
        'source',
        'createdAt',
        'timestamp',
        'status',
        'name',
        'role',
        'referringCoach',
        'coachingChallenge',
        'ipAddress',
        'userAgent',
        'batchProcessed',
        'batchTimestamp',
        'metadata',
        'immediateAccess',
        'utmSource',
        'utmMedium',
        'utmCampaign',
        'utmId',
        'utmTerm',
        'utmContent',
        'notes'
      ]);
    }

    function isValidWaitlistSubmission(data) {
      let hasCreatedAt = 'createdAt' in data;
      let hasTimestamp = 'timestamp' in data;

      return hasOnlyAllowedWaitlistKeys(data) &&
        isValidEmail(data.email) &&
        (!('source' in data) || (data.source is string && data.source.size() <= 100)) &&
        (hasCreatedAt || hasTimestamp) &&
        (!hasCreatedAt || data.createdAt is timestamp) &&
        (!hasTimestamp || data.timestamp is timestamp) &&
        (!('status' in data) || data.status == null || (data.status is string && data.status.size() <= 50)) &&
        (!('name' in data) || data.name == null || (data.name is string && data.name.size() <= 200)) &&
        (!('role' in data) || data.role == null || (data.role is string && data.role.size() <= 100)) &&
        (!('referringCoach' in data) || data.referringCoach == null || (data.referringCoach is string && data.referringCoach.size() <= 200)) &&
        (!('coachingChallenge' in data) || data.coachingChallenge == null || (data.coachingChallenge is string && data.coachingChallenge.size() <= 1000)) &&
        (!('ipAddress' in data) || data.ipAddress == null || (data.ipAddress is string && data.ipAddress.size() <= 100)) &&
        (!('userAgent' in data) || data.userAgent == null || (data.userAgent is string && data.userAgent.size() <= 1024)) &&
        (!('batchProcessed' in data) || data.batchProcessed is bool) &&
        (!('batchTimestamp' in data) || data.batchTimestamp is timestamp) &&
        (!('metadata' in data) || data.metadata == null || data.metadata is map) &&
        (!('immediateAccess' in data) || data.immediateAccess is bool) &&
        (!('utmSource' in data) || data.utmSource == null || (data.utmSource is string && data.utmSource.size() <= 100)) &&
        (!('utmMedium' in data) || data.utmMedium == null || (data.utmMedium is string && data.utmMedium.size() <= 100)) &&
        (!('utmCampaign' in data) || data.utmCampaign == null || (data.utmCampaign is string && data.utmCampaign.size() <= 150)) &&
        (!('utmId' in data) || data.utmId == null || (data.utmId is string && data.utmId.size() <= 100)) &&
        (!('utmTerm' in data) || data.utmTerm == null || (data.utmTerm is string && data.utmTerm.size() <= 100)) &&
        (!('utmContent' in data) || data.utmContent == null || (data.utmContent is string && data.utmContent.size() <= 150)) &&
        (!('notes' in data) || data.notes == null || (data.notes is string && data.notes.size() <= 1000));
    }

    match /waitlist/{docId} {
      allow create: if isValidWaitlistSubmission(request.resource.data);
      allow read: if isAdmin();
      allow update, delete: if false;
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin() || (
        isAuthenticated() &&
        resource.data.teamId != null &&
        teamExists(resource.data.teamId) &&
        (getTeam(resource.data.teamId).data.headCoachId == request.auth.uid ||
         request.auth.uid in getTeam(resource.data.teamId).data.assistantCoachIds)
      );
      allow write: if isOwner(userId);
    }

    match /teams/{teamId} {
      allow create: if isAuthenticated();
      allow read: if isTeamMember(teamId) || isTeamHeadCoach(teamId);
      allow update, delete: if isTeamHeadCoach(teamId);
    }

    match /practicePlans/{planId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid ||
         (resource.data.teamId != null && isTeamMember(resource.data.teamId)));
    }

    match /plays/{playId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid ||
         (resource.data.teamId != null && isTeamMember(resource.data.teamId)));
    }

    match /players/{playerId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid ||
         (resource.data.teamId != null && isTeamMember(resource.data.teamId)));
    }

    match /attendance/{recordId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid ||
         (resource.data.teamId != null && isTeamMember(resource.data.teamId)));
    }

    match /aiInsights/{insightId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid ||
         (resource.data.teamId != null && isTeamMember(resource.data.teamId)));
    }

    match /games/{gameId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid ||
         (resource.data.teamId != null && isTeamMember(resource.data.teamId)));
    }

    match /assessments/{assessmentId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid ||
         (resource.data.teamId != null && isTeamMember(resource.data.teamId)));
    }

    match /staging_feedback/{feedbackId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
