name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_STAGING: 'coach-core-ai-staging'
  FIREBASE_PROJECT_PROD: 'coach-core-ai-prod'

jobs:
  # =============================================================================
  # UNIT AND INTEGRATION TESTS
  # =============================================================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run type checking
      run: npm run typecheck
      
    - name: 🧹 Run linting
      run: npm run lint
      
    - name: 🧪 Run unit tests
      run: npm run test -- --coverage
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # =============================================================================
  # BUILD AND STAGING DEPLOYMENT
  # =============================================================================
  build-and-deploy-staging:
    name: 🏗️ Build & Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔨 Build application
      run: npm run build
      
    - name: 📁 Verify build output
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ Build failed - dist directory not created!"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "❌ Build failed - index.html not found in dist!"
          exit 1
        fi
        echo "✅ Build output verified"
        echo "📊 Build contents:"
        ls -la dist/
        
    - name: 🔧 Setup Firebase CLI
      run: npm install -g firebase-tools
      
    - name: 🔐 Authenticate with Firebase
      run: |
        echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login --token
        firebase use --add ${{ env.FIREBASE_PROJECT_STAGING }} --token ${{ secrets.FIREBASE_TOKEN }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: 🚀 Deploy to Staging
      run: |
        firebase deploy --only hosting:${{ env.FIREBASE_PROJECT_STAGING }} --token ${{ secrets.FIREBASE_TOKEN }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: ⏳ Wait for deployment
      run: sleep 30
      
    - name: 🧪 Run E2E tests on staging
      run: |
        npm run test:e2e:staging
      env:
        CYPRESS_BASE_URL: https://coach-core-ai-staging.web.app

  # =============================================================================
  # LIGHTHOUSE CI PERFORMANCE TESTING
  # =============================================================================
  lighthouse-ci:
    name: 🚨 Lighthouse CI
    runs-on: ubuntu-latest
    needs: build-and-deploy-staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔧 Install Lighthouse CI
      run: npm install -g @lhci/cli
      
    - name: 🚨 Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: 📊 Upload Lighthouse results
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-results
        path: .lighthouseci/

  # =============================================================================
  # CONDITIONAL PRODUCTION DEPLOYMENT
  # =============================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, lighthouse-ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔨 Build application for production
      run: npm run build
      
    - name: 🔧 Setup Firebase CLI
      run: npm install -g firebase-tools
      
    - name: 🔐 Authenticate with Firebase
      run: |
        echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login --token
        firebase use --add ${{ env.FIREBASE_PROJECT_PROD }} --token ${{ secrets.FIREBASE_TOKEN }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: 🚀 Deploy to Production
      run: |
        firebase deploy --only hosting:${{ env.FIREBASE_PROJECT_PROD }} --token ${{ secrets.FIREBASE_TOKEN }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: ⏳ Wait for production deployment
      run: sleep 30
      
    - name: 🧪 Run E2E tests on production
      run: |
        npm run test:e2e:production
      env:
        CYPRESS_BASE_URL: https://coach-core-ai.web.app

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [test, build-and-deploy-staging, lighthouse-ci, deploy-production]
    if: always() && (needs.test.result == 'success' && needs.lighthouse-ci.result == 'success')
    
    steps:
    - name: 📢 Slack Success Notification
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          🎉 *Deployment Successful!*
          
          *Repository:* ${{ github.repository }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.sha }}
          *Author:* ${{ github.actor }}
          
          *Staging:* https://coach-core-ai-staging.web.app
          *Production:* https://coach-core-ai.web.app
          
          *Test Results:* ✅ All tests passed
          *Lighthouse:* ✅ Performance score ≥ 80
          *Deployment:* ✅ Successfully deployed
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: 📢 Discord Success Notification
      if: env.DISCORD_WEBHOOK_URL != ''
      uses: Ilshidur/action-discord@master
      with:
        args: |
          🎉 **Deployment Successful!**
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          
          **Staging:** https://coach-core-ai-staging.web.app
          **Production:** https://coach-core-ai.web.app
          
          **Test Results:** ✅ All tests passed
          **Lighthouse:** ✅ Performance score ≥ 80
          **Deployment:** ✅ Successfully deployed
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  notify-failure:
    name: 📢 Notify Failure
    runs-on: ubuntu-latest
    needs: [test, build-and-deploy-staging, lighthouse-ci, deploy-production]
    if: always() && (needs.test.result == 'failure' || needs.lighthouse-ci.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
    - name: 📢 Slack Failure Notification
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: |
          ❌ *Deployment Failed!*
          
          *Repository:* ${{ github.repository }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.sha }}
          *Author:* ${{ github.actor }}
          
          *Test Results:* ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          *Lighthouse:* ${{ needs.lighthouse-ci.result == 'success' && '✅ Passed' || '❌ Failed' }}
          *Deployment:* ${{ needs.deploy-production.result == 'success' && '✅ Success' || '❌ Failed' }}
          
          *View Details:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: 📢 Discord Failure Notification
      if: env.DISCORD_WEBHOOK_URL != ''
      uses: Ilshidur/action-discord@master
      with:
        args: |
          ❌ **Deployment Failed!**
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          
          **Test Results:** ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          **Lighthouse:** ${{ needs.lighthouse-ci.result == 'success' && '✅ Passed' || '❌ Failed' }}
          **Deployment:** ${{ needs.deploy-production.result == 'success' && '✅ Success' || '❌ Failed' }}
          
          **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔒 Run security audit
      run: npm audit --audit-level=moderate
      
    - name: 🔍 Run dependency check
      run: npm run deps:check
      
    - name: 🛡️ Run security scan
      run: npm run security:scan
