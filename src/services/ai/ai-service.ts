export interface AIPracticePlanRequest {
  sport: string;
  ageGroup: string;
  goals: string[];
  duration: number;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  teamSize?: number;
  equipment?: string[];
  weather?: string;
  recentPerformance?: string;
}

export interface AIPracticePeriod {
  id: string;
  name: string;
  duration: number;
  drills: Array<{
    id: string;
    name: string;
    category: string;
    duration: number;
    intensity: 'low' | 'medium' | 'high';
    description: string;
    equipment: string[];
    objectives: string[];
  }>;
  notes: string;
}

export interface AIPracticePlan {
  id: string;
  title: string;
  sport: string;
  ageGroup: string;
  duration: number;
  goals: string[];
  periods: AIPracticePeriod[];
  notes: string;
  createdAt: Date;
  lastModified: Date;
  aiConfidence: number;
  tags: string[];
  difficulty: 'beginner' | 'intermediate' | 'advanced';
}

export interface AIPracticePlanResponse {
  success: boolean;
  confidence: number;
  suggestions: string[];
  plan: AIPracticePlan;
  message?: string;
}

class AIService {
  private baseUrl: string;

  constructor() {
    this.baseUrl = process.env.REACT_APP_AI_SERVICE_URL || 'http://localhost:3001/api/ai';
  }

  async generatePracticePlan(request: AIPracticePlanRequest): Promise<AIPracticePlanResponse> {
    try {
      // For now, we'll implement a smart rule-based generation
      // In production, this would call an actual AI service
      const generatedPlan = this.generateSmartPracticePlan(request);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      return generatedPlan;
    } catch (error) {
      console.error('AI service error:', error);
      throw new Error('Failed to generate practice plan');
    }
  }

  private generateSmartPracticePlan(request: AIPracticePlanRequest): AIPracticePlanResponse {
    const { sport, ageGroup, goals, duration } = request;
    
    // Smart rule-based generation based on sport and age group
    const warmupDuration = Math.min(15, Math.floor(duration * 0.15));
    const skillsDuration = Math.floor(duration * 0.4);
    const gameDuration = Math.floor(duration * 0.3);
    const cooldownDuration = duration - warmupDuration - skillsDuration - gameDuration;

    const periods: AIPracticePeriod[] = [];
    let currentId = 1;

    // Warm-up period
    if (warmupDuration > 0) {
      periods.push({
        id: String(currentId++),
        name: `Warm-up (${warmupDuration} min)`,
        duration: warmupDuration,
        drills: this.getWarmupDrills(sport, ageGroup),
        notes: 'Focus on dynamic movements and team energy. Ensure proper form and gradual intensity increase.',
      });
    }

    // Skills development period
    if (skillsDuration > 0) {
      periods.push({
        id: String(currentId++),
        name: `Skills Development (${skillsDuration} min)`,
        duration: skillsDuration,
        drills: this.getSkillsDrills(sport, ageGroup, goals),
        notes: 'Emphasize technique over speed. Break down complex movements into manageable parts.',
      });
    }

    // Game application period
    if (gameDuration > 0) {
      periods.push({
        id: String(currentId++),
        name: `Game Application (${gameDuration} min)`,
        duration: gameDuration,
        drills: this.getGameDrills(sport, ageGroup, goals),
        notes: 'Apply all learned skills in game-like situations. Focus on decision-making and teamwork.',
      });
    }

    // Cooldown period
    if (cooldownDuration > 0) {
      periods.push({
        id: String(currentId++),
        name: `Cooldown & Review (${cooldownDuration} min)`,
        duration: cooldownDuration,
        drills: this.getCooldownDrills(sport),
        notes: 'Gentle stretching and team discussion. Review key learning points from the session.',
      });
    }

    return {
      success: true,
      confidence: 0.85, // High confidence for rule-based generation
      suggestions: [],
      plan: {
        id: '1', // Placeholder ID
        title: `Practice Plan for ${sport} (${ageGroup})`,
        sport,
        ageGroup,
        duration,
        goals,
        periods,
        notes: 'Generated by AI',
        createdAt: new Date(),
        lastModified: new Date(),
        aiConfidence: 0.85,
        tags: ['AI Generated', 'Practice Plan'],
        difficulty: 'intermediate', // Default difficulty
      },
    };
  }

  private getWarmupDrills(sport: string, ageGroup: string) {
    const baseDrills = [
      {
        id: 'warmup-1',
        name: 'Dynamic Stretching',
        category: 'warmup',
        duration: 5,
        intensity: 'low' as const,
        description: 'Progressive stretching exercises to prepare muscles and joints',
        equipment: [],
        objectives: ['Increase flexibility', 'Prepare muscles for activity', 'Improve range of motion'],
      },
      {
        id: 'warmup-2',
        name: 'Light Cardio',
        category: 'warmup',
        duration: 5,
        intensity: 'low' as const,
        description: 'Gentle running, jumping jacks, or sport-specific movements',
        equipment: [],
        objectives: ['Increase heart rate', 'Warm up cardiovascular system', 'Prepare for activity'],
      },
    ];

    // Add sport-specific warmup drills
    if (sport === 'Football') {
      baseDrills.push({
        id: 'warmup-3',
        name: 'Football-Specific Movements',
        category: 'warmup',
        duration: 5,
        intensity: 'low' as const,
        description: 'Lateral movements, backpedaling, and quick direction changes',
        equipment: [],
        objectives: ['Prepare for football movements', 'Improve agility', 'Enhance coordination'],
      });
    }

    return baseDrills;
  }

  private getSkillsDrills(sport: string, ageGroup: string, goals: string[]) {
    const drills = [];
    
    if (sport === 'Football') {
      drills.push(
        {
          id: 'skills-1',
          name: 'Passing Fundamentals',
          category: 'skills',
          duration: 10,
          intensity: 'medium' as const,
          description: 'Practice throwing and catching with proper technique',
          equipment: ['Footballs'],
          objectives: ['Improve passing accuracy', 'Enhance catching skills', 'Build muscle memory'],
        },
        {
          id: 'skills-2',
          name: 'Tackling Technique',
          category: 'skills',
          duration: 10,
          intensity: 'medium' as const,
          description: 'Safe tackling practice with proper form and positioning',
          equipment: ['Tackling dummies', 'Pads'],
          objectives: ['Learn safe tackling', 'Improve defensive skills', 'Build confidence'],
        }
      );
    }

    // Add more sport-specific drills based on goals
    if (goals.some(goal => goal.toLowerCase().includes('defense'))) {
      drills.push({
        id: 'skills-3',
        name: 'Defensive Positioning',
        category: 'skills',
        duration: 8,
        intensity: 'medium' as const,
        description: 'Practice defensive stance and positioning',
        equipment: [],
        objectives: ['Improve defensive awareness', 'Enhance positioning', 'Build defensive instincts'],
      });
    }

    return drills;
  }

  private getGameDrills(sport: string, ageGroup: string, goals: string[]) {
    const drills = [];
    
    if (sport === 'Football') {
      drills.push({
        id: 'game-1',
        name: '7-on-7 Scrimmage',
        category: 'game',
        duration: 15,
        intensity: 'high' as const,
        description: 'Small-sided game to practice plays and teamwork',
        equipment: ['Football', 'Cones for field markers'],
        objectives: ['Apply learned skills', 'Improve teamwork', 'Enhance decision-making'],
      });
    }

    return drills;
  }

  private getCooldownDrills(sport: string) {
    return [
      {
        id: 'cooldown-1',
        name: 'Static Stretching',
        category: 'cooldown',
        duration: 5,
        intensity: 'low' as const,
        description: 'Gentle stretching to cool down muscles',
        equipment: [],
        objectives: ['Reduce muscle tension', 'Improve flexibility', 'Prevent soreness'],
      },
      {
        id: 'cooldown-2',
        name: 'Team Discussion',
        category: 'cooldown',
        duration: 5,
        intensity: 'low' as const,
        description: 'Review session highlights and set goals for next practice',
        equipment: [],
        objectives: ['Reinforce learning', 'Build team communication', 'Set future goals'],
      },
    ];
  }
}

export default AIService;
